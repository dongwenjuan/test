// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.1.0
// - protoc             v3.5.1
// source: stat.proto

package metrics

import (
	context "context"
	empty "github.com/golang/protobuf/ptypes/empty"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// StatMsgClient is the client API for StatMsg service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type StatMsgClient interface {
	HandlerStatMsg(ctx context.Context, in *WireStatMessages, opts ...grpc.CallOption) (*empty.Empty, error)
}

type statMsgClient struct {
	cc grpc.ClientConnInterface
}

func NewStatMsgClient(cc grpc.ClientConnInterface) StatMsgClient {
	return &statMsgClient{cc}
}

func (c *statMsgClient) HandlerStatMsg(ctx context.Context, in *WireStatMessages, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/metrics.StatMsg/HandlerStatMsg", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// StatMsgServer is the server API for StatMsg service.
// All implementations must embed UnimplementedStatMsgServer
// for forward compatibility
type StatMsgServer interface {
	HandlerStatMsg(context.Context, *WireStatMessages) (*empty.Empty, error)
	mustEmbedUnimplementedStatMsgServer()
}

// UnimplementedStatMsgServer must be embedded to have forward compatible implementations.
type UnimplementedStatMsgServer struct {
}

func (UnimplementedStatMsgServer) HandlerStatMsg(context.Context, *WireStatMessages) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HandlerStatMsg not implemented")
}
func (UnimplementedStatMsgServer) mustEmbedUnimplementedStatMsgServer() {}

// UnsafeStatMsgServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to StatMsgServer will
// result in compilation errors.
type UnsafeStatMsgServer interface {
	mustEmbedUnimplementedStatMsgServer()
}

func RegisterStatMsgServer(s grpc.ServiceRegistrar, srv StatMsgServer) {
	s.RegisterService(&StatMsg_ServiceDesc, srv)
}

func _StatMsg_HandlerStatMsg_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WireStatMessages)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StatMsgServer).HandlerStatMsg(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/metrics.StatMsg/HandlerStatMsg",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StatMsgServer).HandlerStatMsg(ctx, req.(*WireStatMessages))
	}
	return interceptor(ctx, in, info, handler)
}

// StatMsg_ServiceDesc is the grpc.ServiceDesc for StatMsg service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var StatMsg_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "metrics.StatMsg",
	HandlerType: (*StatMsgServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "HandlerStatMsg",
			Handler:    _StatMsg_HandlerStatMsg_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "stat.proto",
}
