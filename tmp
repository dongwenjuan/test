https://github.com/knative/serving/issues/2484 (Kubernetes adds 2s to cold-start time)
https://github.com/knative/serving/projects/8#card-15028530 (Performance: Sub-Second Cold Start)
https://github.com/knative/serving/issues/2498 (Prototype local scheduling of pods)
https://github.com/knative/serving/issues/2497 (Remove k8s controlplane performance variance from our cold-start time)
https://docs.google.com/document/d/1ErAFL7dpC0exdGuLrrrWeY2hxjTgmk2Io8-r0_gkAA8/edit#heading=h.h3waqqiykz6c (Local Scheduling)



func (r *reconciler) subsetActivationEndpoints(eps *corev1.Endpoints, revID *type.NamespacedName, n int) *corev1.Endpoints {
	// n == 0 means all, and if there are no subsets there's no work to do either.
	if len(eps.Subsets) == 0 || n == 0 {
		return eps
	}

	addrs := make(sets.String, len(eps.Subsets[0].Addresses))
	for _, ss := range eps.Subsets {
		for _, addr := range ss.Addresses {
			addrs.Insert(addr.IP)
		}
	}

	// The input is not larger than desired.
	if len(addrs) <= n {
		return eps
	}

	// Copy the informer's copy, so we can filter it out.
	neps := eps.DeepCopy()

	if subsets := r.subEps[revID] {
		if len(subsets) >= n {
			neps.Subsets = subsets[:n]
		}
		else len(subsets) < n {
            for i := 0; i< (n-len(subsets)); {
				for _, ss := range eps.Subsets {
					if r.revIDSet[ss.Addresses.IP] {
						continue
					}
					else {
						neps.Subsets.append(ss)
						i++
					}
				}
			}
		}
	}
	else {
		r, w := 0, 0
		for r < len(neps.Subsets) {
			ss := neps.Subsets[r]
			// And same algorithm internally.
			ra, wa := 0, 0
			for ra < len(ss.Addresses) {
				if ! r.revIDSet[ss.Addresses[ra].IP] {
					ss.Addresses[wa] = ss.Addresses[ra]
					wa++
				}
				ra++
			}
			// At least one address from the subset was preserved, so keep it.
			if wa > 0 {
				ss.Addresses = ss.Addresses[:wa]
				// At least one address from the subset was preserved, so keep it.
				neps.Subsets[w] = ss
				w++
			}
			r++
		}

		neps.Subsets = neps.Subsets[:w]
	}

	return neps
}
